# -*- coding: utf-8 -*-
"""Untitled7.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1L096yn4ZC0Q8vsRhquWhf73u0XpTPaT8
"""

# Cell 1: install (run as shell)
!pip install streamlit streamlit-folium folium pyngrok pandas --quiet

import os
from pyngrok import ngrok

# -------------------------------
# 3Ô∏è‚É£ Create dummy Streamlit secrets
# (Email notifications won't work in Colab)
# -------------------------------
os.makedirs("/content/.streamlit", exist_ok=True)
with open("/content/.streamlit/secrets.toml", "w") as f:
    f.write("""
EMAIL = "test@example.com"
PASSWORD = "dummy"
SMTP_SERVER = "smtp.gmail.com"
SMTP_PORT = 587
""")

import streamlit as st
import pandas as pd
from datetime import datetime
import os
from streamlit_folium import st_folium
import folium
import re
import smtplib
from email.mime.text import MIMEText
from email.mime.multipart import MIMEMultipart

# ----------------------------
# App Config
# ----------------------------
st.set_page_config(page_title="Civic Issue Tracker", layout="wide")
DATA_FILE = "complaints.csv"
PHOTO_DIR = "photos"

# Ensure photo directory exists
if not os.path.exists(PHOTO_DIR):
    os.makedirs(PHOTO_DIR)

# ----------------------------
# Email Notification Function
# ----------------------------
def send_email_notification(receiver_email, complaint_id, title, new_status):
    """Send email when complaint status changes using Streamlit secrets."""
    try:
        ADMIN_EMAIL = st.secrets["EMAIL"]
        ADMIN_APP_PASSWORD = st.secrets["PASSWORD"]
        SMTP_SERVER = st.secrets.get("SMTP_SERVER", "smtp.gmail.com")
        SMTP_PORT = int(st.secrets.get("SMTP_PORT", 587))

        msg = MIMEMultipart()
        msg["From"] = ADMIN_EMAIL
        msg["To"] = receiver_email
        msg["Subject"] = f"Update on Civic Complaint #{complaint_id}"

        html_body = f"""
        <html>
          <body>
            <p>Hello,</p>
            <p>Your complaint <b>#{complaint_id}</b> titled "<b>{title}</b>"
            is now marked as <b style='color:green;'>{new_status}</b>.</p>
            <p>Thank you for helping make our city better!</p>
          </body>
        </html>
        """
        msg.attach(MIMEText(html_body, "html"))

        with smtplib.SMTP(SMTP_SERVER, SMTP_PORT) as server:
            server.starttls()
            server.login(ADMIN_EMAIL, ADMIN_APP_PASSWORD)
            server.sendmail(ADMIN_EMAIL, receiver_email, msg.as_string())
        st.success(f"üìß Email sent to {receiver_email}")
    except Exception as e:
        st.error(f"‚ùå Email failed: {e}")

# ----------------------------
# Load or create data
# ----------------------------
if os.path.exists(DATA_FILE):
    df = pd.read_csv(DATA_FILE)
else:
    df = pd.DataFrame(columns=[
        "id", "title", "description", "email", "latitude", "longitude",
        "status", "photo", "timestamp"
    ])
    df.to_csv(DATA_FILE, index=False)

# ----------------------------
# Sidebar Navigation
# ----------------------------
st.sidebar.title("Navigation")
page = st.sidebar.radio("Go to", [
    "üìã Report Issue",
    "üìä View Complaints",
    "üõ†Ô∏è Admin Dashboard",
    "üåé Public Dashboard",
    "ü§ñ Chatbot Assistant"
])

# ----------------------------
# Report a New Complaint
# ----------------------------
if page == "üìã Report Issue":
    st.header("üìù Report a New Civic Issue")
    title = st.text_input("Issue Title")
    desc = st.text_area("Description")
    email = st.text_input("Your Email Address (for updates)")

    st.markdown("### Select Location on Map")
    m = folium.Map(location=[20.5937, 78.9629], zoom_start=5)
    map_click = st_folium(m, width=700, height=400)
    lat, lon = None, None
    if map_click and map_click.get("last_clicked"):
        lat = map_click["last_clicked"]["lat"]
        lon = map_click["last_clicked"]["lng"]
        st.success(f"üìç Location selected: ({lat:.4f}, {lon:.4f})")

    photo = st.file_uploader("Upload a photo (optional)", type=["png", "jpg", "jpeg"])

    if st.button("Submit Complaint"):
        if not title or not desc or not email:
            st.error("‚ö†Ô∏è Please fill all required fields.")
        else:
            new_id = len(df) + 1
            photo_path = ""
            if photo:
                photo_path = os.path.join(PHOTO_DIR, f"photo_{new_id}.jpg")
                with open(photo_path, "wb") as f:
                    f.write(photo.getbuffer())

            new_row = {
                "id": new_id,
                "title": title,
                "description": desc,
                "email": email,
                "latitude": lat if lat else "",
                "longitude": lon if lon else "",
                "status": "Pending",
                "photo": photo_path,
                "timestamp": datetime.now().strftime("%Y-%m-%d %H:%M:%S")
            }
            df = pd.concat([df, pd.DataFrame([new_row])], ignore_index=True)
            df.to_csv(DATA_FILE, index=False)
            st.success(f"‚úÖ Complaint #{new_id} submitted successfully!")

# ----------------------------
# View Complaints
# ----------------------------
elif page == "üìä View Complaints":
    st.header("üìã All Reported Issues")
    if len(df) == 0:
        st.info("No complaints reported yet.")
    else:
        st.dataframe(df)
        st.map(df[["latitude", "longitude"]].dropna())

# ----------------------------
# Admin Dashboard
# ----------------------------
elif page == "üõ†Ô∏è Admin Dashboard":
    st.header("üë©‚Äçüíº Admin Panel ‚Äî Update Status")
    if len(df) == 0:
        st.info("No complaints to manage.")
    else:
        selected_id = st.selectbox("Select Complaint ID", df["id"])
        current_status = df.loc[df["id"] == selected_id, "status"].values[0]
        title = df.loc[df["id"] == selected_id, "title"].values[0]
        receiver_email = df.loc[df["id"] == selected_id, "email"].values[0]

        st.write(f"Current Status: **{current_status}**")

        new_status = st.selectbox(
            "Update Status",
            ["Pending", "In Progress", "Resolved"],
            index=["Pending", "In Progress", "Resolved"].index(current_status)
        )

        if st.button("Update Status"):
            df.loc[df["id"] == selected_id, "status"] = new_status
            df.to_csv(DATA_FILE, index=False)
            send_email_notification(receiver_email, selected_id, title, new_status)
            st.success(f"Complaint #{selected_id} marked as '{new_status}'.")

# ----------------------------
# Public Dashboard (Enhanced)
# ----------------------------
elif page == "üåé Public Dashboard":
    st.header("üåü Public Transparency Dashboard ‚Äî Resolved Issues")
    resolved_df = df[df["status"] == "Resolved"]

    if len(resolved_df) == 0:
        st.info("No resolved complaints yet.")
    else:
        st.subheader("üîç Filter Resolved Complaints")
        col1, col2 = st.columns(2)
        with col1:
            start_date = st.date_input("Start Date", value=pd.to_datetime(resolved_df["timestamp"].min()))
        with col2:
            end_date = st.date_input("End Date", value=pd.to_datetime(resolved_df["timestamp"].max()))
        keyword = st.text_input("Search by keyword (title/description)")

        # Filter by date
        filtered_df = resolved_df[
            (pd.to_datetime(resolved_df["timestamp"]).dt.date >= start_date) &
            (pd.to_datetime(resolved_df["timestamp"]).dt.date <= end_date)
        ]

        # Filter by keyword
        if keyword:
            filtered_df = filtered_df[
                filtered_df["title"].str.contains(keyword, case=False, na=False) |
                filtered_df["description"].str.contains(keyword, case=False, na=False)
            ]

        if len(filtered_df) == 0:
            st.warning("No complaints match your filter criteria.")
        else:
            # Map
            m = folium.Map(location=[20.5937, 78.9629], zoom_start=5)
            for _, row in filtered_df.iterrows():
                if pd.notna(row["latitude"]) and pd.notna(row["longitude"]):
                    popup_text = f"<b>{row['title']}</b><br>{row['description']}<br><i>{row['timestamp']}</i>"
                    folium.Marker(
                        [row["latitude"], row["longitude"]],
                        tooltip=row["title"],
                        popup=popup_text,
                        icon=folium.Icon(color="green", icon="check")
                    ).add_to(m)
            st_folium(m, width=700, height=400)

            st.subheader("‚úÖ Resolved Complaints with Photos")
            for _, row in filtered_df.iterrows():
                cols = st.columns([1, 2])
                with cols[0]:
                    if row["photo"] and os.path.exists(row["photo"]):
                        st.image(row["photo"], caption=f"Complaint #{row['id']}", use_column_width=True)
                    else:
                        st.write("No photo")
                with cols[1]:
                    st.markdown(f"**ID:** {row['id']}")
                    st.markdown(f"**Title:** {row['title']}")
                    st.markdown(f"**Description:** {row['description']}")
                    st.markdown(f"**Timestamp:** {row['timestamp']}")

# ----------------------------
# Chatbot Assistant
# ----------------------------
elif page == "ü§ñ Chatbot Assistant":
    st.header("ü§ñ Civic Help Chatbot")
    st.write("Ask me: *What's the status of complaint #2?*")

    user_input = st.text_input("You:", "")
    if st.button("Ask"):
        if not user_input:
            st.warning("Please type something first.")
        else:
            match = re.search(r"#?(\d+)", user_input)
            if match:
                comp_id = int(match.group(1))
                if comp_id in df["id"].values:
                    status = df.loc[df["id"] == comp_id, "status"].values[0]
                    st.info(f"Complaint #{comp_id} is currently **{status}**.")

                    # Display photo if exists
                    photo_path = df.loc[df["id"] == comp_id, "photo"].values[0]
                    if photo_path and os.path.exists(photo_path):
                        st.image(photo_path, caption=f"Complaint #{comp_id} Photo", use_column_width=True)
                    else:
                        st.write("No photo uploaded for this complaint.")
                else:
                    st.error("Complaint ID not found.")
            else:
                st.write("üí¨ Include a complaint number, e.g., #2")

# -------------------------------
# 3Ô∏è‚É£ Run Streamlit in background
# -------------------------------
get_ipython().system_raw('streamlit run app.py --server.port 8501 &')
print("‚úÖ Streamlit is running! To view it, open the preview below (Colab local runtime does not support direct public URLs).")